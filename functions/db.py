import peewee
from pgvector.peewee import VectorField
from playhouse.psycopg3_ext import Psycopg3Database
import imagedata

import os
postgres_host = os.environ['POSTGRES_HOST']
postgres_port = os.environ.get('POSTGRES_PORT', '5432')
postgres_password = os.environ['POSTGRES_PASSWORD']

db = Psycopg3Database(
    "postgres",
    host=postgres_host,
    port=postgres_port,
    user="postgres",
    password=postgres_password
)


class Image(peewee.Model):
    id = peewee.PrimaryKeyField(primary_key=True)
    motive = peewee.TextField(null=False)
    place = peewee.TextField(null=False)
    date = peewee.TextField(null=True)
    download_link = peewee.TextField(null=False, unique=True, index=True)
    arkiv = peewee.TextField(null=False)
    thumbnail = peewee.TextField(null=False)

    class Meta:
        database = db

class EmbeddingFacenet(peewee.Model):
    image = peewee.ForeignKeyField(Image)
    embedding = VectorField(dimensions=512, null=False)

    class Meta:
        database = db
        primary_key = False


db.connect()
db.execute_sql('CREATE EXTENSION IF NOT EXISTS vector')


def get_results_form_db_old(embedding, tolerance, limit=10):
    images = db.execute_sql(f"""
select "t2"."id", "t2"."motive", "t2"."place", "t2"."date", "t2"."download_link", "t2"."arkiv", "t2"."thumbnail", "t3"."distance"
from "image" as "t2"
    inner join
    (SELECT "t1"."image_id",
           MIN("t1"."embedding" <-> '{embedding}') AS "distance"
           FROM "embeddingfacenet" AS "t1"
           WHERE  "t1"."embedding" <-> '{embedding}' < {tolerance}
           GROUP BY "t1"."image_id" LIMIT {limit}) as t3
    on "t3"."image_id" = "t2".id
""")

    c = 0
    for image in images.fetchall():
        print(image)
        c = c+1
        if c > 10:
            break

def get_results_from_db(embedding, tolerance, limit=10):
    subquery = (EmbeddingFacenet
                .select(EmbeddingFacenet.image,
                        peewee.fn.MIN(EmbeddingFacenet.embedding.l2_distance(embedding)).alias('distance'))
                .where(EmbeddingFacenet.embedding.l2_distance(embedding) < tolerance)
                .group_by(EmbeddingFacenet.image)
                .limit(limit))

    query = (Image
             .select(Image, subquery.c.distance)
             .join(subquery, on=(subquery.c.image_id == Image.id)))

    # print(query.sql())

    results = query.execute()

    out = []

    for result in results:
        out.append(imagedata.ImageData(
            motive=result.motive,
            place=result.place,
            date=result.date,
            download_link=result.download_link,
            arkiv=result.arkiv,
            thumb=result.thumbnail,
            distance=result.distance
        ))
    return out


if __name__ == '__main__':
    emebedding = [0.19026819,1.045601,-0.78616834,-0.5669329,0.75323033,-1.308,-0.81971323,1.3310446,0.31376535,-0.26017144,-0.59146553,0.9926004,-0.67689234,-0.9809415,-0.6101591,0.81544346,1.5198897,-0.6677585,-0.38064757,0.50865686,1.1694723,1.2012473,-0.38193426,-1.1239902,0.973275,-1.1931082,1.7335445,0.3616113,1.6044533,1.0077729,-0.7480967,-2.0252097,-1.092448,0.79663503,0.09856495,1.2221857,-0.5615496,-0.2519393,0.264519,0.91540444,0.36171088,-0.998742,1.676417,0.7862436,-1.3804843,1.4191961,-0.3759585,-1.5435086,-0.43735167,0.8937613,2.929398,-1.1018268,-0.12236216,-0.745513,-0.44002357,0.5241222,-1.338249,0.73206604,0.33127657,-0.703318,0.049141392,0.33024794,-1.5002624,0.6993711,-1.5603198,0.95675915,-1.0106943,1.9645697,0.8960139,-1.0963356,-0.55176806,-0.32958633,0.43109116,-1.0619911,0.76838046,-1.1589557,-1.3575003,-0.048735976,-0.25141853,-0.06826772,0.05027692,-1.5554692,0.6252632,-1.5700634,-0.6137546,-0.0005188212,-1.5902085,-0.37846702,0.7970189,2.9645436,-0.24982364,0.6841807,0.37043124,-0.5262991,-1.6097558,-1.6418465,0.6600241,1.3891237,-1.1048027,-1.6267288,0.11055885,1.6363178,1.5096458,0.53607357,1.1524884,-0.37632203,1.0203314,-1.5870351,0.37684417,0.9750703,-1.0493114,-0.54219157,1.720108,0.9108798,1.4749521,-1.3796618,0.11139491,0.56083256,-0.12779634,-1.2063439,0.8260221,1.6647942,-1.4840207,-1.0483868,0.32330486,-0.7257429,1.0373081,0.5708473,0.4630745,1.4192525,-1.0817333,2.5774305,-0.6048113,-1.3385712,0.4935695,-1.1347446,-0.6180231,0.02460305,0.3637214,2.1446257,1.0399655,-0.82731813,-0.49461305,0.35679886,-0.8138479,-1.1940197,0.6999317,-0.7479815,1.4848331,0.14455174,1.3483783,-1.309021,0.21363692,0.7436999,1.081259,-0.8342395,0.55928814,-0.41903788,-0.62827784,1.8220046,2.1296353,-1.554326,-0.6731001,-0.18423101,1.3681208,0.5887805,0.9980046,-1.6801698,-0.4050782,-0.343763,-1.3630167,0.5623203,-0.3180892,1.5245702,1.1506022,0.07799133,0.96913844,-0.58043075,0.40787774,-0.5867931,0.1845858,-0.7968053,-1.8090054,-0.34949842,-1.1572809,2.0350792,0.15207675,0.5163065,-0.36408874,2.7565048,1.2647645,0.80263656,-0.4581082,-0.444225,1.8838941,-0.24777284,-0.49346438,1.6101732,0.32817984,-1.5501531,-1.1201433,-1.6420718,0.6318192,-0.8702474,1.0025649,0.9330399,1.4378638,1.3000435,0.6718388,-0.221776,-0.740454,0.57627225,1.0934097,-0.39305443,-0.65421706,-1.9555975,-2.7014718,0.25573638,-1.7782489,0.9490241,-1.5473825,-0.29495305,0.18455261,0.19556695,1.0859882,0.6675021,-1.4794166,-0.08580373,1.3612907,1.0453148,-0.6272985,-1.7653103,-0.3839411,-0.6590715,0.7223143,-1.0634449,-0.8329165,-1.7072196,-0.9642922,1.3864347,0.3349493,-0.002210714,0.82154876,0.14564554,-0.019762017,1.9983786,-1.4189597,1.216454,-0.035690762,-1.0676788,-0.7615123,2.3064086,-0.63588667,-2.576119,-0.55894303,-1.1878319,1.3921436,-0.0047240267,0.14202124,-0.91288316,-0.46090043,-0.30070305,-1.7126584,0.9621155,1.4986919,0.24946003,-0.43824416,-0.24763876,-0.85525525,0.50519466,-1.2654033,-0.020001832,1.0734499,-0.289045,-0.12585106,1.5311147,0.9060926,-0.69223505,-0.4563434,-1.2713726,-0.8410851,1.0575517,1.2252929,-0.9261014,-0.30995172,-1.1147956,-1.5246185,0.49540558,0.8909469,1.0803206,-0.9555121,-0.429626,-1.4877069,-1.5315102,0.014245626,-0.1733909,0.56061053,0.3721034,0.3806596,0.024870858,0.6793366,1.094769,-1.2387507,-1.1526251,-0.18185076,-1.0557642,1.9265994,-1.5458634,0.4700263,-0.54337776,1.5349202,0.3786513,-1.177896,-1.1171556,2.5164366,-2.9000874,-0.38071716,0.81699735,1.2068119,-0.33547208,0.8430506,-0.80819213,-0.95259404,1.2859664,-0.36880744,0.97441447,0.7305661,0.69057864,0.22248825,0.32752222,-0.9466382,-0.96093494,-0.9088418,0.1528753,0.31077194,-0.35238,0.06849038,-1.9380387,0.96845245,1.4482055,0.41429353,0.39278078,-0.4114787,0.6126494,-0.30909708,1.0531805,0.17298631,-0.37770957,-0.24820338,-0.319028,1.0769604,0.5876928,1.13825,-1.4234487,-1.0162548,-1.043479,0.25588176,1.4285332,-2.499223,-2.2785323,1.1695416,-1.4288558,-1.4240663,-0.26001772,2.6808376,-1.315341,1.2658641,-0.6516783,-1.2724062,-1.3067483,-3.1603394,-2.8970253,0.13756797,-0.010857904,0.83001524,0.13580936,-0.9368597,-0.011959173,-3.0944798,1.3634201,-0.27351713,0.368086,-0.6778161,0.49748814,0.44635183,0.07657403,-0.5756985,1.9862583,-0.109655306,-1.1351378,-0.067148484,0.8573617,-2.555832,0.778392,-0.45611757,-0.2883678,1.7123299,1.0551556,-0.23818915,0.5716513,0.00328522,0.34248835,1.592044,-0.5532229,-0.74122536,0.1875752,-0.2688536,0.16426858,1.4243269,-0.21318823,0.04370404,0.429641,-0.28433773,1.3787802,-1.3801777,-0.44913694,0.11668757,1.2108638,0.097133875,-1.6997797,-0.13059889,1.8973258,0.0021312246,-0.7945095,-0.67948925,-0.67208004,-0.9929831,-1.6807296,0.84281296,-0.04705119,-1.3822265,-0.18165775,0.6689249,0.6006656,0.39835286,0.1477136,1.2605869,0.49398565,0.12924743,0.47682554,0.22012165,0.8287315,1.3712436,-1.0839775,-0.9193698,1.8856207,0.52397275,-0.7980414,1.6341598,-0.97885895,-0.20761439,-0.12814002,0.53430474,0.33075148,-1.5102568,0.69193447,0.824924,0.3080845,-0.85289794,-0.23190624,1.6050646,-1.3613379,1.9189622,-0.6410688,-0.34070152,-0.3275269,-1.1908113,-1.5173255,-0.25205004,-0.22658843,0.40178576,1.0227643,1.5568845,-0.5693927,-1.6798943,0.5583964,2.0817568,0.5307387,-1.141157,-1.2985795,0.34420583,0.26598823,-0.30156714,-0.04522594,1.3756503,0.66292477,-0.7002312,0.5320759,-0.8005246,-0.36506394,0.4601965,-2.4261122,0.26863798,0.667976,0.47439122,1.5379705,0.5923195,0.1257078,0.7689039,0.5572195,-0.42296597,-0.46145415,0.6240068,-0.75929415,0.624731,1.7659593,2.0314667,0.09619847,-0.32240072,-0.32520485,1.7553592,0.09585888]
    tolerance = 30
    get_results_from_db(emebedding, tolerance)
    #get_results_form_db_old(emebedding, tolerance)

    # Notes
    # SELECT "t1"."image_id", MIN("t1"."embedding" <-> '[0.0,...,0.0,0.0]') < 0.5) as 'distance'
    # GROUP BY "t1"."image_id" ORDER BY "t2"."date" DESC
    # .group_by(EmbeddingFacenet.image)
    # .select(EmbeddingFacenet.image, peewee.fn.MIN(EmbeddingFacenet.embedding.l2_distance(embedding)).alias("distance"))
    # .join(Image)
    # .order_by(Image.date.desc())
